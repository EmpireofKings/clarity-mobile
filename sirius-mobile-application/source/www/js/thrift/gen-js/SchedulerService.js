//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SchedulerService_registerBackend_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
SchedulerService_registerBackend_args.prototype = {};
SchedulerService_registerBackend_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new RegMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_registerBackend_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_registerBackend_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerService_registerBackend_result = function(args) {
};
SchedulerService_registerBackend_result.prototype = {};
SchedulerService_registerBackend_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_registerBackend_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_registerBackend_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerService_consultAddress_args = function(args) {
  this.serviceType = null;
  if (args) {
    if (args.serviceType !== undefined) {
      this.serviceType = args.serviceType;
    }
  }
};
SchedulerService_consultAddress_args.prototype = {};
SchedulerService_consultAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_consultAddress_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_consultAddress_args');
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.STRING, 1);
    output.writeString(this.serviceType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerService_consultAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SchedulerService_consultAddress_result.prototype = {};
SchedulerService_consultAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new THostPort();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_consultAddress_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_consultAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerService_updateLatencyStat_args = function(args) {
  this.name = null;
  this.latencyStat = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.latencyStat !== undefined) {
      this.latencyStat = args.latencyStat;
    }
  }
};
SchedulerService_updateLatencyStat_args.prototype = {};
SchedulerService_updateLatencyStat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.latencyStat = new LatencyStat();
        this.latencyStat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_updateLatencyStat_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_updateLatencyStat_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.latencyStat !== null && this.latencyStat !== undefined) {
    output.writeFieldBegin('latencyStat', Thrift.Type.STRUCT, 2);
    this.latencyStat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerService_updateLatencyStat_result = function(args) {
};
SchedulerService_updateLatencyStat_result.prototype = {};
SchedulerService_updateLatencyStat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerService_updateLatencyStat_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerService_updateLatencyStat_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SchedulerServiceClient.prototype = {};
SchedulerServiceClient.prototype.registerBackend = function(message, callback) {
  this.send_registerBackend(message, callback); 
  if (!callback) {
  this.recv_registerBackend();
  }
};

SchedulerServiceClient.prototype.send_registerBackend = function(message, callback) {
  this.output.writeMessageBegin('registerBackend', Thrift.MessageType.CALL, this.seqid);
  var args = new SchedulerService_registerBackend_args();
  args.message = message;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerBackend();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SchedulerServiceClient.prototype.recv_registerBackend = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SchedulerService_registerBackend_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
SchedulerServiceClient.prototype.consultAddress = function(serviceType, callback) {
  this.send_consultAddress(serviceType, callback); 
  if (!callback) {
    return this.recv_consultAddress();
  }
};

SchedulerServiceClient.prototype.send_consultAddress = function(serviceType, callback) {
  this.output.writeMessageBegin('consultAddress', Thrift.MessageType.CALL, this.seqid);
  var args = new SchedulerService_consultAddress_args();
  args.serviceType = serviceType;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_consultAddress();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SchedulerServiceClient.prototype.recv_consultAddress = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SchedulerService_consultAddress_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'consultAddress failed: unknown result';
};
SchedulerServiceClient.prototype.updateLatencyStat = function(name, latencyStat, callback) {
  this.send_updateLatencyStat(name, latencyStat, callback); 
  if (!callback) {
  this.recv_updateLatencyStat();
  }
};

SchedulerServiceClient.prototype.send_updateLatencyStat = function(name, latencyStat, callback) {
  this.output.writeMessageBegin('updateLatencyStat', Thrift.MessageType.CALL, this.seqid);
  var args = new SchedulerService_updateLatencyStat_args();
  args.name = name;
  args.latencyStat = latencyStat;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateLatencyStat();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SchedulerServiceClient.prototype.recv_updateLatencyStat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SchedulerService_updateLatencyStat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
