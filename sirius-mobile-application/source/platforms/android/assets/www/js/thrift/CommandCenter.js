//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

CommandCenter_registerService_args = function(args) {
  this.machineName = null;
  this.port = null;
  this.serviceType = null;
  if (args) {
    if (args.machineName !== undefined) {
      this.machineName = args.machineName;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
    if (args.serviceType !== undefined) {
      this.serviceType = args.serviceType;
    }
  }
};
CommandCenter_registerService_args.prototype = {};
CommandCenter_registerService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.machineName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_registerService_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_registerService_args');
  if (this.machineName !== null && this.machineName !== undefined) {
    output.writeFieldBegin('machineName', Thrift.Type.STRING, 1);
    output.writeString(this.machineName);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.STRING, 3);
    output.writeString(this.serviceType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_registerService_result = function(args) {
};
CommandCenter_registerService_result.prototype = {};
CommandCenter_registerService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_registerService_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_registerService_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_askTextQuestion_args = function(args) {
  this.question = null;
  if (args) {
    if (args.question !== undefined) {
      this.question = args.question;
    }
  }
};
CommandCenter_askTextQuestion_args.prototype = {};
CommandCenter_askTextQuestion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_askTextQuestion_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_askTextQuestion_args');
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 1);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_askTextQuestion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CommandCenter_askTextQuestion_result.prototype = {};
CommandCenter_askTextQuestion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_askTextQuestion_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_askTextQuestion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_ping_args = function(args) {
};
CommandCenter_ping_args.prototype = {};
CommandCenter_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_ping_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_ping_result = function(args) {
};
CommandCenter_ping_result.prototype = {};
CommandCenter_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_ping_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenterClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CommandCenterClient.prototype = {};
CommandCenterClient.prototype.registerService = function(machineName, port, serviceType, callback) {
  if (callback === undefined) {
    this.send_registerService(machineName, port, serviceType);
    this.recv_registerService();
  } else {
    var postData = this.send_registerService(machineName, port, serviceType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_registerService);
  }
};

CommandCenterClient.prototype.send_registerService = function(machineName, port, serviceType, callback) {
  this.output.writeMessageBegin('registerService', Thrift.MessageType.CALL, this.seqid);
  var args = new CommandCenter_registerService_args();
  args.machineName = machineName;
  args.port = port;
  args.serviceType = serviceType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CommandCenterClient.prototype.recv_registerService = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CommandCenter_registerService_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
CommandCenterClient.prototype.askTextQuestion = function(question, callback) {
  if (callback === undefined) {
    this.send_askTextQuestion(question);
    return this.recv_askTextQuestion();
  } else {
    var postData = this.send_askTextQuestion(question, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_askTextQuestion);
  }
};

CommandCenterClient.prototype.send_askTextQuestion = function(question, callback) {
  this.output.writeMessageBegin('askTextQuestion', Thrift.MessageType.CALL, this.seqid);
  var args = new CommandCenter_askTextQuestion_args();
  args.question = question;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CommandCenterClient.prototype.recv_askTextQuestion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CommandCenter_askTextQuestion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'askTextQuestion failed: unknown result';
};
CommandCenterClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

CommandCenterClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new CommandCenter_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CommandCenterClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CommandCenter_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
