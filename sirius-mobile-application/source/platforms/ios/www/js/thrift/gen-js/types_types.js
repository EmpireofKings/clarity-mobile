//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


THostPort = function(args) {
  this.ip = null;
  this.port = null;
  if (args) {
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
THostPort.prototype = {};
THostPort.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THostPort.prototype.write = function(output) {
  output.writeStructBegin('THostPort');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryInput = function(args) {
  this.type = null;
  this.data = null;
  this.tags = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
QueryInput.prototype = {};
QueryInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.data = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.tags = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.tags.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryInput.prototype.write = function(output) {
  output.writeStructBegin('QueryInput');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.data.length);
    for (var iter14 in this.data)
    {
      if (this.data.hasOwnProperty(iter14))
      {
        iter14 = this.data[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter15 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter15))
      {
        iter15 = this.tags[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuerySpec = function(args) {
  this.name = null;
  this.content = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
QuerySpec.prototype = {};
QuerySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.content = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new QueryInput();
          elem22.read(input);
          this.content.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuerySpec.prototype.write = function(output) {
  output.writeStructBegin('QuerySpec');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.content.length);
    for (var iter23 in this.content)
    {
      if (this.content.hasOwnProperty(iter23))
      {
        iter23 = this.content[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegMessage = function(args) {
  this.app_name = null;
  this.endpoint = null;
  if (args) {
    if (args.app_name !== undefined) {
      this.app_name = args.app_name;
    }
    if (args.endpoint !== undefined) {
      this.endpoint = args.endpoint;
    }
  }
};
RegMessage.prototype = {};
RegMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.endpoint = new THostPort();
        this.endpoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegMessage.prototype.write = function(output) {
  output.writeStructBegin('RegMessage');
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRUCT, 2);
    this.endpoint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LatencyStat = function(args) {
  this.hostport = null;
  this.latency = null;
  if (args) {
    if (args.hostport !== undefined) {
      this.hostport = args.hostport;
    }
    if (args.latency !== undefined) {
      this.latency = args.latency;
    }
  }
};
LatencyStat.prototype = {};
LatencyStat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hostport = new THostPort();
        this.hostport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.latency = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LatencyStat.prototype.write = function(output) {
  output.writeStructBegin('LatencyStat');
  if (this.hostport !== null && this.hostport !== undefined) {
    output.writeFieldBegin('hostport', Thrift.Type.STRUCT, 1);
    this.hostport.write(output);
    output.writeFieldEnd();
  }
  if (this.latency !== null && this.latency !== undefined) {
    output.writeFieldBegin('latency', Thrift.Type.I64, 2);
    output.writeI64(this.latency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

